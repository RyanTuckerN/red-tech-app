[{"/home/nick/web-projects/RED Coding Challenge/Frontend/src/reportWebVitals.ts":"1","/home/nick/web-projects/RED Coding Challenge/Frontend/src/components/Page/index.tsx":"2","/home/nick/web-projects/RED Coding Challenge/Frontend/src/shared/colors.ts":"3","/home/nick/web-projects/RED Coding Challenge/Frontend/src/views/Home/index.tsx":"4","/home/nick/web-projects/RED Coding Challenge/Frontend/src/App.tsx":"5","/home/nick/web-projects/RED Coding Challenge/Frontend/src/contexts/Theme/index.tsx":"6","/home/nick/web-projects/RED Coding Challenge/Frontend/src/contexts/State/index.tsx":"7","/home/nick/web-projects/RED Coding Challenge/Frontend/src/views/Home/components/index.tsx":"8","/home/nick/web-projects/RED Coding Challenge/Frontend/src/components/Header/index.tsx":"9","/home/nick/web-projects/RED Coding Challenge/Frontend/src/views/Home/components/ListHeader.tsx":"10","/home/nick/web-projects/RED Coding Challenge/Frontend/src/views/Home/components/Views.tsx":"11","/home/nick/web-projects/RED Coding Challenge/Frontend/src/views/Home/components/AddOrderDialog.tsx":"12","/home/nick/web-projects/RED Coding Challenge/Frontend/src/views/Home/components/useStyles.tsx":"13"},{"size":440,"mtime":1609460914000,"results":"14","hashOfConfig":"15"},{"size":540,"mtime":1609460914000,"results":"16","hashOfConfig":"15"},{"size":266,"mtime":1609460914000,"results":"17","hashOfConfig":"15"},{"size":2400,"mtime":1639589151373,"results":"18","hashOfConfig":"15"},{"size":456,"mtime":1639498923090,"results":"19","hashOfConfig":"15"},{"size":1088,"mtime":1639537669732,"results":"20","hashOfConfig":"15"},{"size":1231,"mtime":1639508242611,"results":"21","hashOfConfig":"15"},{"size":4395,"mtime":1639600300464,"results":"22","hashOfConfig":"15"},{"size":1105,"mtime":1609460914000,"results":"23","hashOfConfig":"15"},{"size":5407,"mtime":1639536701183,"results":"24","hashOfConfig":"15"},{"size":6122,"mtime":1639536014365,"results":"25","hashOfConfig":"15"},{"size":4367,"mtime":1640580296273,"results":"26","hashOfConfig":"15"},{"size":1814,"mtime":1639536460209,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"1sf0ii2",{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"42","messages":"43","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"45"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"49"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},"/home/nick/web-projects/RED Coding Challenge/Frontend/src/reportWebVitals.ts",[],["61","62"],"/home/nick/web-projects/RED Coding Challenge/Frontend/src/components/Page/index.tsx",[],["63","64"],"/home/nick/web-projects/RED Coding Challenge/Frontend/src/shared/colors.ts",[],"/home/nick/web-projects/RED Coding Challenge/Frontend/src/views/Home/index.tsx",[],"/home/nick/web-projects/RED Coding Challenge/Frontend/src/App.tsx",[],"/home/nick/web-projects/RED Coding Challenge/Frontend/src/contexts/Theme/index.tsx",[],"/home/nick/web-projects/RED Coding Challenge/Frontend/src/contexts/State/index.tsx",["65"],"import React, { createContext, useEffect, useState } from \"react\";\nimport { Order } from \"../../views/Home\";\n\ninterface Props {\n  children: React.ReactNode;\n}\n\nexport interface OrderContext {\n  savedOrder: Order;\n  setSavedOrder?: (order: Order) => void;\n}\n\ninterface DefaultCtx {\n  savedOrder: Order;\n}\n\nexport const OrderSaveCtx = createContext<OrderContext>({\n  savedOrder: {\n    orderType: \"Standard\",\n    customerName: \"\",\n    createdByUserName: \"\",\n  },\n});\n\nexport default function OrderProvider({ children }: Props) {\n  const [savedOrder, setSavedOrder] = useState<Order>({\n    orderType: \"Standard\",\n    customerName: \"\",\n    createdByUserName: \"\",\n  });\n\n  useEffect(() => {\n    setSavedOrder(\n      localStorage.getItem(\"savedOrder\")\n        ? JSON.parse(localStorage.getItem(\"savedOrder\")!)\n        : {\n            savedOrder: {\n              orderType: \"Standard\",\n              customerName: \"\",\n              createdByUserName: \"\",\n            },\n          }\n    );\n  }, []);\n\n  useEffect(() => {\n    localStorage.setItem(\"savedOrder\", JSON.stringify(savedOrder));\n  }, [savedOrder]);\n\n  return (\n    <OrderSaveCtx.Provider value={{ savedOrder, setSavedOrder }}>\n      {children}\n    </OrderSaveCtx.Provider>\n  );\n}\n",["66","67"],"/home/nick/web-projects/RED Coding Challenge/Frontend/src/views/Home/components/index.tsx",["68","69"],"import { useState, useEffect } from \"react\";\nimport { Order } from \"..\";\nimport { Typography } from \"@material-ui/core\";\n\nimport { DesktopView, DeviceView } from \"./Views\";\nimport ListHeader from \"./ListHeader\";\nimport AddOrder from \"./AddOrderDialog\";\nimport useStyles from \"./useStyles\";\n\nexport interface HomeProps {\n  loading: boolean;\n  orders: Order[];\n  selected: number[];\n  deleteSelected: () => Promise<void>;\n  toggleSelected: (orderId: number) => void;\n  setSelected: React.Dispatch<React.SetStateAction<number[]>>;\n  addOrderToHomeState: (order: Order) => void;\n}\n\nexport default function HomeView(props: HomeProps) {\n  const [orders, setOrders] = useState<Order[]>(props.orders); //unique to this component\n  const [addOpen, setAddOpen] = useState(false); //add order dialog\n  const [typeSortValue, setTypeSortValue] = useState<string>(\"\"); //sort by order type\n  const [customerSortValue, setCustomerSortValue] = useState<string>(\"\"); //sort by customer\n  const [typeOptions, setTypeOptions] = useState<string[]>([]); //only show existing types\n  const [customerOptions, setCustomerOptions] = useState<string[]>([]); //only show existing customers\n\n  const { selected, deleteSelected, setSelected } = props;\n  \n  const classes = useStyles();\n\n  const clearFilters = () => {\n    setTypeSortValue(\"\");\n    setCustomerSortValue(\"\");\n  };\n\n  // update display by id\n  const filterOrdersById = (id: string): void => {\n    if (id === \"\") filterBy();\n    else {\n      let tempArr = [...props.orders];\n      tempArr = tempArr.filter((order) => order.orderId === parseInt(id));\n      setOrders(tempArr);\n    }\n  };\n\n  //filter display by customer or type\n  const filterBy = (): void => {\n    setSelected([]); //don't want to delete by accident if not showing, so clear selected\n    let tempArr = [...props.orders];\n\n    if (typeSortValue)\n      tempArr = tempArr.filter((order) => order.orderType === typeSortValue);\n\n    if (customerSortValue)\n      tempArr = tempArr.filter(\n        (order) => order.customerName === customerSortValue\n      );\n\n    setOrders(tempArr);\n  };\n\n  //select VISIBLE orders, so filtered orders are unaffected\n  const selectAll = (): void => {\n    setSelected([...orders.map((order) => order.orderId!)]);\n  };\n\n  //update local state orders and filter options when props.orders changes\n  useEffect(() => {\n    setOrders(props.orders);\n    setTypeSortValue(\"\");\n    setCustomerSortValue(\"\");\n    setTypeOptions(\n      props.orders\n        .map((order) => order.orderType)\n        .filter((order, i, arr) => arr.indexOf(order) === i)\n        .sort()\n    );\n    setCustomerOptions(\n      props.orders\n        .map((order) => order.customerName)\n        .filter((order, i, arr) => arr.indexOf(order) === i)\n        .sort()\n    );\n  }, [props.orders]);\n\n  //reset selected when orders change\n  useEffect(() => {\n    setSelected([]);\n  }, [orders]);\n\n  //filter whenever user adds/removes filter\n  useEffect(filterBy, [typeSortValue, customerSortValue]);\n\n  const headerProps = {\n    classes,\n    selected,\n    orders,\n    typeOptions,\n    customerOptions,\n    typeSortValue,\n    customerSortValue,\n    setTypeSortValue,\n    setCustomerSortValue,\n    setAddOpen,\n    filterOrdersById,\n    clearFilters,\n    deleteSelected,\n    setSelected,\n    selectAll,\n    addOrderToHomeState: props.addOrderToHomeState\n  };\n\n  return (\n    <div className={classes.wrapper}>\n      <ListHeader {...headerProps} />\n      <div className={classes.listWrapper}>\n        {!orders.length && (\n          <div\n            style={{\n              margin: \"0 auto\",\n              width: \"fit-content\",\n            }}\n          >\n            <Typography\n              variant={\"caption\"}\n              style={{fontSize: \"1em\", fontStyle: \"italic\"}}>\n              {props.loading ? \"Loading\" : \"No Orders!\"}\n            </Typography>\n          </div>\n        )}\n\n        {/* media screen queries in useStyles */}\n        <div className={classes.desktop}>\n          {!!orders.length && <DesktopView {...props} classes={classes} orders={orders} />}\n        </div>\n        <div className={classes.device}>\n          {!!orders.length && <DeviceView {...props} classes={classes} orders={orders} />}\n        </div>\n      </div>\n\n      {/* dialog */}\n      <AddOrder\n        open={addOpen}\n        setOpen={setAddOpen}\n        addOrderToHomeState={props.addOrderToHomeState}\n      />\n    </div>\n  );\n}\n",["70","71"],"/home/nick/web-projects/RED Coding Challenge/Frontend/src/components/Header/index.tsx",[],"/home/nick/web-projects/RED Coding Challenge/Frontend/src/views/Home/components/ListHeader.tsx",[],"/home/nick/web-projects/RED Coding Challenge/Frontend/src/views/Home/components/Views.tsx",[],["72","73"],"/home/nick/web-projects/RED Coding Challenge/Frontend/src/views/Home/components/AddOrderDialog.tsx",[],"/home/nick/web-projects/RED Coding Challenge/Frontend/src/views/Home/components/useStyles.tsx",[],{"ruleId":"74","replacedBy":"75"},{"ruleId":"76","replacedBy":"77"},{"ruleId":"74","replacedBy":"78"},{"ruleId":"76","replacedBy":"79"},{"ruleId":"80","severity":1,"message":"81","line":13,"column":11,"nodeType":"82","messageId":"83","endLine":13,"endColumn":21},{"ruleId":"74","replacedBy":"84"},{"ruleId":"76","replacedBy":"85"},{"ruleId":"86","severity":1,"message":"87","line":90,"column":6,"nodeType":"88","endLine":90,"endColumn":14,"suggestions":"89"},{"ruleId":"86","severity":1,"message":"90","line":93,"column":23,"nodeType":"88","endLine":93,"endColumn":57,"suggestions":"91"},{"ruleId":"74","replacedBy":"92"},{"ruleId":"76","replacedBy":"93"},{"ruleId":"74","replacedBy":"94"},{"ruleId":"76","replacedBy":"95"},"no-native-reassign",["96"],"no-negated-in-lhs",["97"],["96"],["97"],"@typescript-eslint/no-unused-vars","'DefaultCtx' is defined but never used.","Identifier","unusedVar",["96"],["97"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'setSelected'. Either include it or remove the dependency array.","ArrayExpression",["98"],"React Hook useEffect has missing dependencies: 'props.orders' and 'setSelected'. Either include them or remove the dependency array.",["99"],["96"],["97"],["96"],["97"],"no-global-assign","no-unsafe-negation",{"desc":"100","fix":"101"},{"desc":"102","fix":"103"},"Update the dependencies array to be: [orders, setSelected]",{"range":"104","text":"105"},"Update the dependencies array to be: [typeSortValue, customerSortValue, setSelected, props.orders]",{"range":"106","text":"107"},[2867,2875],"[orders, setSelected]",[2946,2980],"[typeSortValue, customerSortValue, setSelected, props.orders]"]